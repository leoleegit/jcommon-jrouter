package org.jcommon.com.jrouter.noio;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.RejectedExecutionHandler;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

import org.apache.log4j.Logger;
import org.apache.mina.core.session.IoSession;

public class ServerSurrogate {
	private Logger logger = Logger.getLogger(this.getClass());
	
	protected Map<String, ThreadPoolExecutor> threadPools = new HashMap<String, ThreadPoolExecutor>();
	
	protected List<IoSession> sessions = new ArrayList<IoSession>();
	
	
	public ServerSurrogate(){
		
	}
	
	public void addConnection(IoSession session){
		if(!sessions.contains(session)){
			sessions.add(session);
			String connect_group_id = session.getAttribute(NoIOConnector1.CONNECT_GROUP_ID)!=null?
					(String) session.getAttribute(NoIOConnector1.CONNECT_GROUP_ID):null;
			if(connect_group_id==null){
				logger.warn("can't find connect_group_id!");
				return;
			}else{
				ThreadPoolExecutor threadPool = null;
				if(!threadPools.containsKey(connect_group_id)){
					threadPool = createThreadPool(connect_group_id);
					threadPools.put(connect_group_id, threadPool);
				}
				else{
					threadPool = threadPools.get(connect_group_id);
					int size   = threadPool.getCorePoolSize()+1;
					threadPool.setCorePoolSize(size);
					threadPool.setMaximumPoolSize(size);
				}
				threadPool.prestartAllCoreThreads();
			}
		}
	}
	
	public void removeConnection(IoSession session){
		if(sessions.contains(session))
			sessions.remove(session);
	}
	
	public IoSession getConnection(String connect_group_id){
		if(connect_group_id == null)return null;
		IoSession session = null;
		synchronized(sessions){
			for(IoSession ss : sessions){
				String id = ss.getAttribute(NoIOConnector1.CONNECT_GROUP_ID)!=null?
						(String) ss.getAttribute(NoIOConnector1.CONNECT_GROUP_ID):null;
				if(connect_group_id.equals(id)){
					session = ss;
					break;
				}
			}
		}
		removeConnection(session);
		return session;
	}
	
//	public void deliver(String connect_group_id, final RouterRequest request){
//		if(threadPools.containsKey(connect_group_id)){
//			threadPools.get(connect_group_id).execute(new Runnable(){
//
//				@Override
//				public void run() {
//					// TODO Auto-generated method stub
//					ConnectionWorkerThread workerThread = (ConnectionWorkerThread) Thread.currentThread();
//					workerThread.deliver(request);
//				}
//				
//			});
//		}else{
//			logger.warn("cann't find group connection:"+connect_group_id);
//		}
//	}
	
	 /**
     * Creates a new thread pool that will not contain any thread. So new connections
     * won't be created to the server at this point.
     */
    private ThreadPoolExecutor createThreadPool(String connect_group_id) {
        // Create a pool of threads that will process queued packets.
    	ThreadPoolExecutor threadPool = new ConnectionWorkerThreadPool(1, 1, 60,
                TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(),
                new ConnectionsWorkerFactory(connect_group_id), new ThreadPoolExecutor.CallerRunsPolicy());
    	return threadPool;
    }
	
    /**
     * ThreadPoolExecutor that verifies connection status before executing a task. If
     * the connection is invalid then the worker thread will be dismissed and the task
     * will be injected into the pool again.
     */
    private class ConnectionWorkerThreadPool extends ThreadPoolExecutor {
        public ConnectionWorkerThreadPool(int corePoolSize, int maximumPoolSize, long keepAliveTime,
                                          TimeUnit unit,
                                          BlockingQueue<Runnable> workQueue,
                                          ThreadFactory threadFactory,
                                          RejectedExecutionHandler handler) {
            super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory,
                    handler);
        }

        protected void beforeExecute(Thread thread, Runnable task) {
            super.beforeExecute(thread, task);
            ConnectionWorkerThread workerThread = (ConnectionWorkerThread) thread;
            // Check that the worker thread is valid. This means that it has a valid connection
            // to the server
            if (!workerThread.isValid()) {
                // Request other thread to process the task. In fact, a new thread
                // will be created by the
                execute(task);
                // Throw an exception so that this worker is dismissed
                throw new IllegalStateException(
                        "There is no connection to the server or connection is lost.");
            }
        }

        public void shutdown() {
            // Notify the server that the connection manager is being shut down
            execute(new Runnable() {
                public void run() {
                    ConnectionWorkerThread thread = (ConnectionWorkerThread) Thread.currentThread();
                    thread.notifySystemShutdown();
                }
            });
            // Stop the workers and shutdown
            super.shutdown();
        }
    }
	
	/**
     * Factory of threads where is thread will create and keep its own connection
     * to the server. If creating new connections to the server failes 2 consecutive
     * times then existing client connections will be closed.
     */
    private class ConnectionsWorkerFactory implements ThreadFactory {
        final ThreadGroup group;
        final AtomicInteger threadNumber = new AtomicInteger(1);
        final AtomicInteger failedAttempts = new AtomicInteger(0);

        public String connect_group_id;
        
        ConnectionsWorkerFactory(String connect_group_id) {
            SecurityManager s = System.getSecurityManager();
            group = (s != null) ? s.getThreadGroup() :
                    Thread.currentThread().getThreadGroup();
            this.connect_group_id = connect_group_id;
        }

        public Thread newThread(Runnable r) {
            // Create new worker thread that will include a connection to the server
            ConnectionWorkerThread t = new ConnectionWorkerThread(group, r,
                    "Connection Worker - " + threadNumber.getAndIncrement(), 0,connect_group_id);
            if (t.isDaemon())
                t.setDaemon(false);
            if (t.getPriority() != Thread.NORM_PRIORITY)
                t.setPriority(Thread.NORM_PRIORITY);
            // Return null if failed to create worker thread
            if (!t.isValid()) { 
                return null;
            }
            // Clean up the counter of failed attemps to create new connections
            failedAttempts.set(0);
            return t;
        }
    }
}
